package sf.ics.cc.sessionmanager.ctiservice;

import static org.mockito.Matchers.anyObject;
import static org.powermock.api.mockito.PowerMockito.doReturn;

import java.lang.reflect.Constructor;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.powermock.api.mockito.PowerMockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;

import sf.ics.cc.sessionmanager.util.SessionManagerMapping;

import com.cisco.cse.ctiserverlib.cil.Arguments;
import com.cisco.cse.ctiserverlib.cil.CtiSession;

@RunWith(MockitoJUnitRunner.class)
public class SessionManageConstructorTest {

	@Mock
	private CtiSession ctiSession;
	
	@Autowired
	ApplicationContext context;
	
	@Test
	public void testCtiServerConnectionSuccess() throws Exception  {
		SessionManagerMapping sessionManagerMapping = PowerMockito.spy(new SessionManagerMapping());
		sessionManagerMapping.setPeripheralID("5000");
		sessionManagerMapping.setServerNameA("WTSDZFSC.opr.system.test.statefarm.org");
		sessionManagerMapping.setPortA("42027");
		sessionManagerMapping.setServerNameB("WTSDZFR8.opr.system.test.statefarm.org");
		sessionManagerMapping.setPortB("43027");
		sessionManagerMapping.setHeartBeat("300");
		
		SessionManager sessionManager = PowerMockito.spy(new SessionManager());
		doReturn(1).when(ctiSession).AddEventListener(sessionManager, 0);
		doReturn(1).when(ctiSession).SetSessionMode(2);
		doReturn(1).when(ctiSession).Connect((Arguments)anyObject());
		
		Constructor con=SessionManager.class.getDeclaredConstructor(CtiSession.class, SessionManagerMapping.class);
	    con.setAccessible(true);     
	    con.newInstance(ctiSession, sessionManagerMapping);
	}
	
	@Test
	public void testCtiServerConnectionLogPathException() throws Exception  {
		SessionManagerMapping sessionManagerMapping = PowerMockito.spy(new SessionManagerMapping());
		sessionManagerMapping.setPeripheralID("5000");
		sessionManagerMapping.setServerNameA("WTSDZFSC.opr.system.test.statefarm.org");
		sessionManagerMapping.setPortA("42027");
		sessionManagerMapping.setServerNameB("WTSDZFR8.opr.system.test.statefarm.org");
		sessionManagerMapping.setPortB("43027");
		sessionManagerMapping.setHeartBeat("300");
		sessionManagerMapping.setCtiLogPath("");
		
		SessionManager sessionManager = PowerMockito.spy(new SessionManager());
		doReturn(1).when(ctiSession).AddEventListener(sessionManager, 0);
		doReturn(1).when(ctiSession).SetSessionMode(2);
		doReturn(1).when(ctiSession).Connect((Arguments)anyObject());
		
		Constructor con=SessionManager.class.getDeclaredConstructor(CtiSession.class, SessionManagerMapping.class);
	    con.setAccessible(true);     
	    con.newInstance(ctiSession, sessionManagerMapping);
	}
	
	@Test(expected = Exception.class)
	public void testCtiServerConnectionFailed() throws Exception  {
		SessionManagerMapping sessionManagerMapping = PowerMockito.spy(new SessionManagerMapping());
		sessionManagerMapping.setPeripheralID("5000");
		sessionManagerMapping.setServerNameA("WTSDZFSC.opr.system.test.statefarm.org");
		sessionManagerMapping.setPortA("42027");
		sessionManagerMapping.setServerNameB("WTSDZFR8.opr.system.test.statefarm.org");
		sessionManagerMapping.setPortB("43027");
		sessionManagerMapping.setHeartBeat("300");
		
		SessionManager sessionManager = PowerMockito.spy(new SessionManager());
		doReturn(1).when(ctiSession).AddEventListener(sessionManager, 0);
		doReturn(1).when(ctiSession).SetSessionMode(2);
		doReturn(0).when(ctiSession).Connect((Arguments)anyObject());

		Constructor con=SessionManager.class.getDeclaredConstructor(CtiSession.class, SessionManagerMapping.class);
	    con.setAccessible(true);     
	    con.newInstance(ctiSession, sessionManagerMapping);
		
	}
}
